schema {
    query: Query
    mutation: Mutation
}

type Query {
    getFollowers(userId: Int!): [Follower]
    getFollowing(userId: Int!): [Follower]
    getAllRecommendationsChatBot: [OpenAIRequest]
    getRecomendationsChatBotByUserId(userId: Int!): [OpenAIRequest]
    getRandomRecipe: ApiRecipe


    getRandomPosts(count: Int!): [Post]
    getPostById(postId: String!): Post
    getPostsByUser(userId: Int!, page: Int!, pageSize: Int!): [Post]
    getCommentsByPostIdWithPagination(postId: String!, page: Int!, pageSize: Int!): [CommentPost]
    getFavoritePostsByUserId(userId: Int!, page: Int!, pageSize: Int!): [FavoritePost]
    getContentFavoritePostByUserIdAndPostId(userId: Int!, postId: String!): Post
    getRatingPostById(ratingId: String!): RatingPost
    getRatingCommentById(ratingId: String!): RatingCommentPost
}

type Mutation {
    followUser(follower: FollowerDTO!): String
    unfollowUser(follower: FollowerDTO!): String
    generateRecommendationChatBot(userId: Int!, prompt: String!): String
    deleteHistoryChatBotByUserId(userId: Int!): String

    createPost(userId: Int!, title: String!, content: String!): Post
    updatePost(postId: String!, title: String, content: String): Post
    deletePost(postId: String!): String
    addCommentPost(postId: String!, comment: CommentPostInput!): CommentPost
    editCommentPost(postId: String!, commentId: String!, content: String!): CommentPost
    deleteCommentPost(postId: String!, commentId: String!): String
    saveFavoritePost(userId: Int!, postId: String!): FavoritePost
    removeFavoritePost(userId: Int!, postId: String!): String
    createRatingPost(postId: String!, userId: Int!, value: Int!): RatingPost
    updateRatingPost(ratingId: String!, value: Int!): RatingPost
    deleteRatingPost(ratingId: String!): Boolean
    createRatingComment(commentId: String!, userId: Int!, value: Int!): RatingCommentPost
    updateRatingComment(ratingId: String!, value: Int!): RatingCommentPost
    deleteRatingComment(ratingId: String!): Boolean
}

type Follower {
    user: User
    followed: User
}

type User {
    userId: ID!
    name: String!
    paternalLastName: String!
    maternalLastName: String!
    birthdate: String!
    phoneNumber: String!
    email: String!
}

type OpenAIRequest {
    id: ID!
    userId: Int!
    prompt: String!
    recommendations: String!
    requestDate: String!
}

input FollowerDTO {
    userId: Int!
    followedId: Int!
}

#Para la consulta aleatoria de la api spoonacular
type ApiRecipe {
    id: ID!
    title: String
    image: String
    readyInMinutes: Int
    cookingMinutes: Int
    preparationMinutes: Int
    sourceName: String
    sourceUrl: String
    spoonacularSourceUrl: String
    servings: Int
    extendedIngredients: [ApiIngredientsRecipe]
    summary: String
    winePairing: ApiWinePairingRecipe
}

type ApiIngredientsRecipe {
    name: String
    amount: Float
    unit: String
    original: String
    measures: ApiMeasuresRecipe
    consistency: String
    meta: [String]
}

type ApiMeasuresRecipe {
    metric: ApiMetricRecipe
    us: ApiUsRecipe
}

type ApiMetricRecipe {
    amount: Float
    unitLong: String
    unitShort: String
}

type ApiUsRecipe {
    amount: Float
    unitLong: String
    unitShort: String
}

type ApiWinePairingRecipe {
    pairedWines: [String]
    pairingText: String
}


type Post {
  postId: String
  userId: Int
  title: String
  content: String
  postDate: String
  ratingAverage: Int
}

type CommentPost {
  commentId: String
  postId: String
  userId: Int
  content: String
  commentDate: String
}

# Definición del tipo FavoritePost
type FavoritePost {
  favoritePostId: FavoritePostId
  createdAt: String
}

# Definición del tipo FavoritePostId, que contiene los identificadores de la publicación y el usuario
type FavoritePostId {
  postId: String
  userId: Int
}


type RatingPost {
  ratingId: String
  postId: String
  userId: Int
  value: Int
}


type RatingCommentPost {
  ratingId: String
  commentId: String
  userId: Int
  value: Int
}

input CommentPostInput {
  userId: Int!
  content: String!
}
