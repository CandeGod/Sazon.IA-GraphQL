schema {
    query: Query
    mutation: Mutation
}

type Query {
    getFollowers(userId: Int!): [Follower]
    getFollowing(userId: Int!): [Follower]
    getAllRecommendationsChatBot: [OpenAIRequest]
    getRecomendationsChatBotByUserId(userId: Int!): [OpenAIRequest]
    getRandomRecipe: ApiRecipe
}

type Mutation {
    followUser(follower: FollowerDTO!): String
    unfollowUser(follower: FollowerDTO!): String
    generateRecommendationChatBot(userId: Int!, prompt: String!): String
    deleteHistoryChatBotByUserId(userId: Int!): String
}

type Follower {
    user: User
    followed: User
}

type User {
    userId: ID!
    name: String!
    paternalLastName: String!
    maternalLastName: String!
    birthdate: String!
    phoneNumber: String!
    email: String!
}

type OpenAIRequest {
    id: ID!
    userId: Int!
    prompt: String!
    recommendations: String!
    requestDate: String!
}

input FollowerDTO {
    userId: Int!
    followedId: Int!
}

#Para la consulta aleatoria de la api spoonacular
type ApiRecipe {
    id: ID!
    title: String
    image: String
    readyInMinutes: Int
    cookingMinutes: Int
    preparationMinutes: Int
    sourceName: String
    sourceUrl: String
    spoonacularSourceUrl: String
    servings: Int
    extendedIngredients: [ApiIngredientsRecipe]
    summary: String
    winePairing: ApiWinePairingRecipe
}

type ApiIngredientsRecipe {
    name: String
    amount: Float
    unit: String
    original: String
    measures: ApiMeasuresRecipe
    consistency: String
    meta: [String]
}

type ApiMeasuresRecipe {
    metric: ApiMetricRecipe
    us: ApiUsRecipe
}

type ApiMetricRecipe {
    amount: Float
    unitLong: String
    unitShort: String
}

type ApiUsRecipe {
    amount: Float
    unitLong: String
    unitShort: String
}

type ApiWinePairingRecipe {
    pairedWines: [String]
    pairingText: String
}